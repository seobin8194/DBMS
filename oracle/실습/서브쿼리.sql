--SELECT문에 서브쿼리 작성
--전체 평균 급여를 행마다 출력하여 자신의 급여와 비교하고 싶을때
SELECT
   PROFNO 교수번호,
   NAME 교수이름,
   평균급여
FROM T_PROFESSOR;
--평균급여는 그룹함수이고 내 급여는 일반 컬럼이기 때문에 같이 검색 불가
--평균급여를 서브쿼리로 작성
SELECT AVG(PAY) FROM T_PROFESSOR;
SELECT
   PROFNO 교수번호,
   NAME 교수이름,
   (SELECT AVG(PAY) FROM T_PROFESSOR) 평균급여
FROM T_PROFESSOR;

--FROM절에서 서브쿼리 작성
--PLAYER 테이블에서 TEAM_ID='K10'인 선수 중에 POSITION이 GK인 선수
SELECT *
FROM TEAM_ID = 'K10'인 선수 중
WHERE "POSITION" = 'GK';
--가상의 테이블에서 결과를 가져오고 싶을때
--TEAM_ID='K01'인 선수 중
SELECT * FROM PLAYER WHERE TEAM_ID = 'K10';
SELECT *
FROM (SELECT * FROM PLAYER WHERE TEAM_ID = 'K10')
WHERE "POSITION" = 'GK';

--WHERE절에서 서브쿼리 작성
--PLAYER 테이블에서 평균키보다 키가 작은 선수
SELECT *
FROM PLAYER
WHERE HEIGHT < 평균키;
--WHERE절에서 그룹함수를 사용할 수 없다
--평균키
SELECT AVG(HEIGHT) FROM PLAYER;
SELECT *
FROM PLAYER
WHERE HEIGHT < (SELECT AVG(HEIGHT) FROM PLAYER);

--뷰 생성
CREATE VIEW TEST_VIEW AS (SELECT * FROM T_STUDENT WHERE DEPTNO1 = 101);
SELECT * FROM TEST_VIEW;

--뷰 삭제
DROP VIEW TEST_VIEW;

--PLAYER 테이블에서 전체 키 평균과 포지션 별 평균 키 구하기
SELECT
   포지션
   포지션 별 평균키
   전체 키 평균
FROM PLAYER GROUP BY "POSITION";
--그룹함수와 일반 컬럼은 함께 검색할 수 없다
--전체 키 평균
SELECT AVG(HEIGHT) FROM PLAYER;
SELECT
   POSITION 포지션,
   AVG(HEIGHT) "포지션 별 평균키",
   (SELECT AVG(HEIGHT) FROM PLAYER) "전체 키 평균"
FROM PLAYER 
WHERE "POSITION" IS NOT NULL
GROUP BY "POSITION";

--PLAYER 테이블에서 NICKNAME이 NULL인 선수들은 정태민 선수의 닉네임으로 바꾸기
UPDATE PLAYER
SET NICKNAME = 정태민선수의 닉네임
WHERE NICKNAME IS NULL;
--정태민선수의 닉네임
SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME = '정태민';
UPDATE PLAYER
SET NICKNAME = (SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME = '정태민')
WHERE NICKNAME IS NULL;

--EMPLOYEES 테이블에서 평균 급여보다 낮은 사람들의 급여를 10프로 인상시키기
SELECT * FROM EMPLOYEES;
UPDATE EMPLOYEES 
SET SALARY = 10프로 인상
WHERE SALERY < 평균급여;
--평균급여
SELECT AVG(SALARY) FROM EMPLOYEES;
UPDATE EMPLOYEES 
SET SALARY = SALARY + SALARY*0.1
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

--PLAYER 테이블에서 평균키보다 큰 선수 삭제
DELETE FROM PLAYER WHERE HEIGHT > 평균키;
--평균키
SELECT AVG(HEIGHT) FROM PLAYER;
DELETE FROM PLAYER WHERE HEIGHT > (SELECT AVG(HEIGHT) FROM PLAYER);

--정남일 선수가 속한 팀의 선수들 검색
SELECT * FROM PLAYER WHERE TEAM_ID = 정남일이 속한 팀의 아이디;
--정남일이 속한 팀의 아이디
SELECT TEAM_ID FROM PLAYER WHERE PLAYER_NAME = '정남일';
SELECT * 
FROM PLAYER 
WHERE TEAM_ID = (SELECT TEAM_ID FROM PLAYER WHERE PLAYER_NAME = '정남일');

--정현수 선수가 속한 팀의 선수들 감색
SELECT *
FROM PLAYER
WHERE TEAM_ID = 정현수가 속한 팀의 아이디;
--정현수가 속한 팀의 아이디
SELECT TEAM_ID FROM PLAYER WHERE PLAYER_NAME = '정현수';
--등호나 부등호의 오른쪽에는 값이 무조건 한개여야 한다
--따라서 등호가 아닌 IN으로 비교를 해야한다
--따라서 서브 쿼리를 먼저 작성하여 실행해보고 전체 쿼리를 작성
SELECT *
FROM PLAYER
WHERE TEAM_ID IN (SELECT TEAM_ID FROM PLAYER WHERE PLAYER_NAME = '정현수');

--경기장 중 일정이 20120501 ~ 20120503 사이에 있는 경기장
SELECT * FROM STADIUM;
SELECT * FROM SCHEDULE;
SELECT
   STADIUM_ID,
   STADIUM_NAME
FROM STADIUM
WHERE STADIUM_ID = 20120501 ~ 20120503 사이에 있는 경기장 아이디;
--20120501 ~ 20120503 사이에 있는 경기장 아이디
SELECT STADIUM_ID, SCHE_DATE FROM SCHEDULE WHERE SCHE_DATE BETWEEN '20120501' AND '20120503';
SELECT
   STADIUM_ID "경기장 아이디",
   STADIUM_NAME "경기장 이름"
FROM STADIUM 
WHERE STADIUM_ID IN (SELECT STADIUM_ID FROM SCHEDULE WHERE SCHE_DATE BETWEEN '20120501' AND '20120503');

--왕선재 선수와 생일이 같은 선수들 검색하여 팀 아이디로 정렬
SELECT *
FROM PLAYER
WHERE BIRTH_DATE = 완선재 선수 생일
ORDER BY TEAM_ID ASC;
--완선재 선수 생일
SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME = '왕선재';
SELECT *
FROM PLAYER
WHERE BIRTH_DATE = (SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME = '왕선재')
ORDER BY TEAM_ID ASC;

--이윤나 학생이 속한 과 조교수의 급여보다 급여를 더 받는 교수들 검색
SELECT *
FROM T_PROFESSOR
WHERE PAY > 이윤나 학생이 속한 과 조교수의 급여;
--이윤나 학생이 속한 과 조교수의 급여
SELECT PAY FROM T_PROFESSOR WHERE DEPTNO = 이윤나 학생이 속한 과 AND "POSITION" = '조교수';
--이윤나 학생이 속한 과
SELECT DEPTNO1 FROM T_STUDENT WHERE NAME = '이윤나';
--이윤나 학생이 속한 과 조교수의 급여
SELECT PAY FROM T_PROFESSOR WHERE DEPTNO = (SELECT DEPTNO1 FROM T_STUDENT WHERE NAME = '이윤나') AND "POSITION" = '조교수';
SELECT *
FROM T_PROFESSOR
WHERE PAY > (SELECT PAY FROM T_PROFESSOR WHERE DEPTNO = (SELECT DEPTNO1 FROM T_STUDENT WHERE NAME = '이윤나') AND "POSITION" = '조교수');

--각 팀별로 김장관 선수보다 늦게 태어난 선수의 수 검색
SELECT
   COUNT(*)
FROM PLAYER
WHERE BIRTH_DATE > 김장관 선수 생일
GROUP BY TEAM_ID;
--김장관 선수 생일
SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME = '김장관';
SELECT
   TEAM_ID "팀 아이디",
   COUNT(*) "선수의 수"
FROM PLAYER
WHERE BIRTH_DATE > (SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME = '김장관')
GROUP BY TEAM_ID;

--DEN의 전화번호 앞 3자리가 같은 사원들 검색(EMPLOYEES)
SELECT *
FROM EMPLOYEES
WHERE 전화번호 앞 3자리 = DEN의 전화번호 앞 3자리;
SELECT * FROM EMPLOYEES;
--전화번호 앞 3자리
SELECT SUBSTR(PHONE_NUMBER,1,3) FROM EMPLOYEES;
--DEN의 전화번호 앞 3자리
SELECT SUBSTR(PHONE_NUMBER,1,3) FROM EMPLOYEES WHERE FIRST_NAME = 'Den';
SELECT *
FROM EMPLOYEES
WHERE SUBSTR(PHONE_NUMBER,1,3) = (SELECT SUBSTR(PHONE_NUMBER,1,3) FROM EMPLOYEES WHERE FIRST_NAME = 'Den');
--방법2
SELECT *
FROM EMPLOYEES
WHERE PHONE_NUMBER LIKE (SELECT SUBSTR(PHONE_NUMBER,1,3) FROM EMPLOYEES WHERE FIRST_NAME = 'Den') || '%';

--STADIUM 테이블에서 경기장 이름과 홈팀명 좌석수 경기장들의 평균 좌석 검색
SELECT * FROM STADIUM;
SELECT * FROM TEAM;
SELECT
   S.STADIUM_NAME "경기장 이름",
   S.SEAT_COUNT "좌석 수",
   T.TEAM_NAME 홈팀명,
   경기장들의 평균좌석 수 
FROM STADIUM S JOIN TEAM T ON S.HOMETEAM_ID = T.TEAM_ID;
--경기장들의 평균좌석 수
SELECT AVG(SEAT_COUNT) FROM STADIUM;
SELECT
   S.STADIUM_NAME "경기장 이름",
   S.SEAT_COUNT "좌석 수",
   NVL(T.TEAM_NAME,'없음') 홈팀명,
   (SELECT AVG(SEAT_COUNT) FROM STADIUM) "평균좌석 수" 
FROM STADIUM S LEFT OUTER JOIN TEAM T ON S.HOMETEAM_ID = T.TEAM_ID;
--방법2
SELECT
   S.STADIUM_NAME "경기장 이름",
   S.SEAT_COUNT "좌석 수",
   NVL((SELECT T.TEAM_NAME FROM TEAM T WHERE S.HOMETEAM_ID = T.TEAM_ID),'없음') 홈팀명,
   (SELECT AVG(SEAT_COUNT) FROM STADIUM) "평균좌석 수" 
FROM STADIUM S;

--선수들 중에서 키는 평균보다 작고 몸무게는 평균보다 높은 선수 검색
SELECT *
FROM PLAYER
WHERE HEIGHT < 평균 키 AND WEIGHT > 평균 몸무게;
--평균 키
SELECT AVG(HEIGHT) FROM PLAYER;
--평균 몸무게
SELECT AVG(WEIGHT) FROM PLAYER;
SELECT *
FROM PLAYER
WHERE HEIGHT < (SELECT AVG(HEIGHT) FROM PLAYER) AND WEIGHT > (SELECT AVG(WEIGHT) FROM PLAYER);

--이름에 L이 있는 사원들의 부서명과 지역 검색 (EMP와 DEPT 테이블 참고)
SELECT * FROM DEPT;
SELECT * FROM EMP;
SELECT
   E.ENAME 이름,
   D.DNAME 부서명,
   D.LOC 지역
FROM EMP E JOIN DEPT D ON E.DEPTNO = D.DEPTNO
WHERE E.ENAME LIKE '%L%';

SELECT
   DNAME,
   LOC
FROM DEPT
WHERE DEPTNO = 이름에 L이 있는 사원들의 부서명;
--이름에 L이 있는 사원들의 부서 아이디
SELECT DEPTNO FROM EMP WHERE ENAME LIKE '%L%';
SELECT
   DNAME 부서명,
   LOC 위치
FROM DEPT
WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE ENAME LIKE '%L%');

--JOB TITLE 중에 MABAGER는 문자열이 포함되는 직원들의 평균 연봉을 JOB TITLE 별로 검색
SELECT * FROM EMPLOYEES;
SELECT * FROM JOBS;
SELECT
   J.JOB_TITLE,
   AVG(E.SALARY)
FROM EMPLOYEES E JOIN JOBS J ON E.JOB_ID = J.JOB_ID
WHERE J.JOB_TITLE LIKE '%Manager%'
GROUP BY J.JOB_TITLE;

--선수들 중에서 각 팀별로 키가 큰 선수들 검색
SELECT * FROM PLAYER;
SELECT * FROM TEAM;
--팀 별로 가장 큰 키
SELECT TEAM_ID, MAX(HEIGHT)FROM PLAYER GROUP BY TEAM_ID;
--SELECT문으로 출력하 가상 테이블과 조인한다
SELECT *
FROM PLAYER P 
   JOIN (SELECT TEAM_ID, MAX(HEIGHT) MH FROM PLAYER GROUP BY TEAM_ID) A 
      ON P.TEAM_ID = A.TEAM_ID AND P.HEIGHT = A.MH;
      
--교수들 중에 김영조 교수와 김영조 교수보다 입사일이 늦지만 급여가 높은 교수들의 PROFNO NAME PAY 검색
SELECT * FROM T_PROFESSOR;
SELECT
   PROFNO,
   NAME,
   PAY
FROM T_PROFESSOR
WHERE PROFNO = 김영조 교수 아이디이거나 김영조 교수보다 입사일이 늦지만 급여가 높은 교수의 아이디;
--김영조 교수 아이디이거나 김영조 교수보다 입사일이 늦지만 급여가 높은 교수의 아이디
SELECT PROFNO
FROM T_PROFESSOR
WHERE HIREDATE >= 김영조 입사일 AND PAY >= 김영조 급여;
--김영조 입사일
SELECT HIREDATE FROM T_PROFESSOR WHERE NAME = '김영조';
--김영조 급여
SELECT PAY FROM T_PROFESSOR WHERE NAME = '김영조';
--김영조 교수 아이디이거나 김영조 교수보다 입사일이 늦지만 급여가 높은 교수의 아이디
SELECT PROFNO
FROM T_PROFESSOR
WHERE HIREDATE >= (SELECT HIREDATE FROM T_PROFESSOR WHERE NAME = '김영조') AND PAY >= (SELECT PAY FROM T_PROFESSOR WHERE NAME = '김영조');
SELECT
   PROFNO 교수번호,
   NAME 이름,
   PAY 급여,
   HIREDATE 입사일
FROM T_PROFESSOR
WHERE PROFNO IN 
   (SELECT PROFNO 
    FROM T_PROFESSOR 
    WHERE HIREDATE >= (SELECT HIREDATE FROM T_PROFESSOR WHERE NAME = '김영조') 
       AND PAY >= (SELECT PAY FROM T_PROFESSOR WHERE NAME = '김영조')
    );

--PLAYER 테이블에서 팀별 최대 몸무게인 선수의 TEAM_ID REGION_NAME PLAYER_NAME WEIGHT 검색
SELECT * FROM PLAYER;
SELECT * FROM TEAM;
--팀 별 최대 몸무게
SELECT TEAM_ID, MAX(WEIGHT) FROM PLAYER GROUP BY TEAM_ID;
--팀별 최대ㅔ 몸무게를 구한 가상 테이불과 조인하고 지역이름을 검색하기 위해서 팀 테이블과도 조인한다
SELECT 
   P.TEAM_ID 팀아이디,
   P.PLAYER_NAME 선수이름,
   P.WEIGHT 몸무게,
   T.REGION_NAME 지역이름   
FROM PLAYER P
   JOIN (SELECT TEAM_ID, MAX(WEIGHT) MW FROM PLAYER GROUP BY TEAM_ID) A ON P.TEAM_ID = A.TEAM_ID AND P.WEIGHT = A.MW
   JOIN TEAM T ON P.TEAM_ID = T.TEAM_ID;

--DEPT 테이블에서 LOC별 총 급여 와 평균 급여를 반올림한 값과 전체 사원의 평균 급여 검색
SELECT * FROM DEPT;
SELECT * FROM EMP;
--전체 사원의 평균 급여
SELECT AVG(SAL) FROM EMP;
--DEPT와 EMP를 조인한 테이블을 LOC별로 그룹핑하여 LOC별 사원 정보를 검색한다
SELECT 
    D.LOC 위치,
    SUM(E.SAL) "총 급여",
    ROUND(AVG(E.SAL)) "평균 급여",
    (SELECT AVG(SAL) FROM EMP) "전체 급여 평균"
FROM EMP E JOIN DEPT D ON E.DEPTNO = D.DEPTNO
GROUP BY LOC;

--EMP 테이블에서 HIREDATE가 FORD의 입사년도와 같은 사원 전체 정보 검색
SELECT * FROM EMP;
SELECT *
FROM EMP
WHERE HIREDATE = FORD의 입사년도;
--FORD의 입사년도
SELECT HIREDATE FROM EMP WHERE ENAME = 'FORD';
SELECT * FROM EMP;
SELECT *
FROM EMP
WHERE HIREDATE = (SELECT HIREDATE FROM EMP WHERE ENAME = 'FORD');

--T_EMP2에서 직급이 과장인 사람의 최소 연봉자보다 급여를 많이 받는 직원의 이름 직급 급여 검색(TO_CHAR 포맷 이용해서 ,넣고 뒤에 원 붙이기)
SELECT 
   NAME,
   POST,
   PAY
FROM T_EMP2
WHERE PAY > 직급이 과장인 사람의 최소 연봉자 급여;
--직급이 과장인 사람의 최소 연봉자 급여
SELECT MIN(PAY) FROM T_EMP2 WHERE POST = '과장'; 
SELECT 
   NAME 이름,
   POST 직급,
   TO_CHAR(PAY,'999,999,999') || '원' 급여
FROM T_EMP2
WHERE PAY > ANY(SELECT PAY FROM T_EMP2 WHERE POST = '과장');

--4학년 학생들의 최소 몸무게보다 몸무게가 덜 나가는 학생의 이름 학년 몸무게
--4학년 학생들의 몸무게
SELECT WEIGHT FROM T_STUDENT WHERE GRADE = 4;
--모든 4학년 학생들의 몸무게보다 적으면 된다
SELECT 
   NAME 이름,
   GRADE 학년,
   WEIGHT 몸무게
FROM T_STUDENT
WHERE WEIGHT < ALL(SELECT WEIGHT FROM T_STUDENT WHERE GRADE = 4);

--자신의 직급의 평균 급여보다 같거나 많이 받는 직원의 이름 직급 급여 검색
SELECT * FROM T_EMP2;
SELECT
    EMPNO,
    NAME,
    POST,
    PAY
FROM T_EMP2
WHERE PAY > 나의 직급 평균급여;
--직급별 평균 급여
SELECT POST, AVG(PAY) FROM T_EMP2 GROUP BY POST;
--직급별 평균급여가 검색된 테이블을 조인하고 메인 테이블의 급여가 직급평균 급여보다 낮으면 걸러낸다
SELECT
    E.EMPNO 아이디,
    E.NAME 이름,
    NVL(E.POST,'평사원') 직급,
    E.PAY 급여
FROM T_EMP2 E FULL OUTER JOIN (SELECT POST, AVG(PAY) AP FROM T_EMP2 GROUP BY POST) A ON NVL(E.POST,'평사원') = NVL(A.POST,'평사원')
WHERE E.PAY >= A.AP;

--EXISTS
SELECT * FROM EMP WHERE SAL IN (SELECT SAL FROM EMP WHERE DEPTNO = 20);
--모든 지원이 다 출력된다 -> 행마다 조건을 검사하고 만족하면 출력
SELECT * FROM EMP WHERE EXISTS (SELECT SAL FROM EMP WHERE DEPTNO = 20);

--INSERT 여러개하기
--맨 끝에 SELECT 아무거나 나와야한다
INSERT ALL
   INTO 테이블 VALUES()
   INTO 테이블B VALUES()
   INTO 테이블B VALUES()
SELECT * FROM DUAL;

--VALUE 대신 서브쿼리 작성 가능 
INSERT INTO 테이블(SELECT FROM WHERE);

--테이블 내용 2배로 늘리기
--더미 데이터(토이 데이터)만들기
INSERT INTO 테이블 (SELECT * FROM 테이블);
SELECT * FROM PLAYER WHERE TEAM_ID = 'K04' AND "POSITION" = 'DF';

--UNION
(SELECT * FROM PLAYER WHERE TEAM_ID = 'K04')
UNION
(SELECT * FROM PLAYER WHERE "POSITION" = 'DF');
--UNION ALL
(SELECT * FROM PLAYER WHERE TEAM_ID = 'K04')
UNION ALL
(SELECT * FROM PLAYER WHERE "POSITION" = 'DF');